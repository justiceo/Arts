#!/bin/bash

if [[ ! $# -eq 2 ]]
then
	echo "Enter file name and number of parts"
	exit
fi

orig_source_file=$1
let "part_no = 1"
function fragment() {
	source_file=$1
	no_of_parts=$2
	if [[ $no_of_parts -eq 1 ]]
	then
		exit
	fi

	#echo "no of parts is $no_of_parts"

	total_lines=$( wc -l < $source_file )
	#echo "total_lines is $total_lines"
	if [[ total_lines -eq 0 ]]
	then
		exit
	fi

	total_revisions=$( grep revision=\" < $source_file | wc -l )
	#echo "total revisions is $total_revisions"
	if [[ total_revisions -eq 0 ]]
	then
		exit
	fi

	revision_lines_w_no=$( grep -n revision=\" < $source_file )
	
	#the current part file would be a one unit of the required number of files
	let "selected_revisions = $total_revisions / $no_of_parts"
	#echo "selected revisions is $selected_revisions"

	#the part file holds the commit information of data in current part
	part_file=$( echo "$orig_source_file.$part_no" )
	let "part_no = $part_no + 1"
	#echo "part_file is $part_file"

	#get revision lines in avro.log take the middle part, take the last element extract the second value
	division_line=$( eval 'cat $source_file | grep -n revision=\" | head -$selected_revisions | tail -1' | cut -d':' -f 1 )	
	#echo "division line is $division_line"
	
	#when we reach the last two divisions, name them appropriately
	if [ $no_of_parts -eq 2 ]
	then
		rest_file=$( echo "$orig_source_file.$part_no" )
	else
		rest_file=$( echo "$source_file.frag" )
	fi


	let "part_file_end = $division_line -2 "
	#echo "part_file end is $part_file_end"

	let "rest_file_start = $total_lines - $part_file_end"

	eval "head -$part_file_end < $source_file > $part_file"
	eval "tail -$rest_file_start < $source_file > $rest_file"

	if [[ $no_of_parts > 2 ]]
	then
		let "no_of_parts = $no_of_parts - 1 "
		#echo "exit no of parts is $no_of_parts"
		fragment $rest_file $no_of_parts
		
	fi
}

function cleanup() {
	if [[ $1 > 2 ]]
	then
		rm *.frag
	fi
}

fragment $1 $2
cleanup $2








